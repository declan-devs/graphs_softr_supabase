<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Price vs Energy Chart</title>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <style>
    body { font-family: sans-serif; margin: 20px; }
    #chart { width: 100%; max-width: 900px; height: 500px; }
  </style>
</head>
<body>

  <h2>Price vs Energy Usage</h2>
  <div id="chart">Loading...</div>

  <script>
    // ðŸ”§ 1. Supabase Config â€” fill in your project info
    const SUPABASE_URL = 'https://your-project.supabase.co';
    const SUPABASE_KEY = 'your-anon-public-key';
    const supabase = supabase.createClient(SUPABASE_URL, SUPABASE_KEY);

    // ðŸ”§ 2. Define table and column names
    const priceTable = 'your_price_table';
    const energyTable = 'your_energy_table';

    // Column mappings
    const priceDateCol = 'date';
    const priceValueCol = 'price';

    const energyDateCol = 'date';
    const energyValueCol = 'energy_kwh';

    // ðŸ”„ 3. Fetch data from both tables
    async function loadData() {
      const { data: priceData, error: priceError } = await supabase
        .from(priceTable)
        .select(`${priceDateCol}, ${priceValueCol}`)
        .order(priceDateCol, { ascending: true });

      const { data: energyData, error: energyError } = await supabase
        .from(energyTable)
        .select(`${energyDateCol}, ${energyValueCol}`)
        .order(energyDateCol, { ascending: true });

      if (priceError || energyError) {
        document.getElementById('chart').innerText = 'Error loading data.';
        console.error(priceError || energyError);
        return;
      }

      plotChart(priceData, energyData);
    }

    // ðŸ“Š 4. Plot with Plotly
    function plotChart(priceData, energyData) {
      const trace1 = {
        x: priceData.map(row => row[priceDateCol]),
        y: priceData.map(row => row[priceValueCol]),
        name: 'Price ($)',
        type: 'scatter',
        yaxis: 'y1',
        line: { color: 'blue' }
      };

      const trace2 = {
        x: energyData.map(row => row[energyDateCol]),
        y: energyData.map(row => row[energyValueCol]),
        name: 'Energy (kWh)',
        type: 'scatter',
        yaxis: 'y2',
        line: { color: 'green' }
      };

      const layout = {
        title: 'Price vs Energy Usage',
        xaxis: { title: 'Date' },
        yaxis: { title: 'Price ($)', side: 'left' },
        yaxis2: {
          title: 'Energy (kWh)',
          overlaying: 'y',
          side: 'right'
        },
        legend: { x: 0.1, y: 1.1, orientation: 'h' }
      };

      Plotly.newPlot('chart', [trace1, trace2], layout);
    }

    // ðŸš€ 5. Load data on page load
    loadData();
  </script>

</body>
</html>
